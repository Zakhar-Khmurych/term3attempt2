using System;
using System.Collections.Generic;

namespace PolishNotation2
{
    class Program
    {
        static Queue<string> Tokenize(string input_string)
        { 
            Queue<string> tokens = new Queue<string>();
          
            string nr_buffer = "";
            
            for (int i = 0; i < input_string.Length; i++)
            {
                
                if (Char.IsNumber(input_string[i]))
                {
                    nr_buffer += input_string[i];
                }
                else if ((input_string[i] == '+') || (input_string[i] == '-') || (input_string[i] == '*') || (input_string[i] == '/')  || (input_string[i] == '(') || (input_string[i] == ')'))
                {
                    if (nr_buffer != "")
                    {
                        tokens.Enqueue(nr_buffer);
                    }
                    nr_buffer = "";
                    tokens.Enqueue(Convert.ToString(input_string[i]));
                }
                //
            }
            tokens.Enqueue(nr_buffer);
            return tokens;
        }

        static bool IsItReallyNumeric(string input)
        {
            bool is_it_really_numeric = true;
            foreach (var symbol in input)
            {
                if (!Char.IsNumber(symbol))
                {
                    is_it_really_numeric = false;
                    break;
                }
            }
            return is_it_really_numeric;
        }

        static int CheckPriority(string operation)
        {
            int priority = 0;
            if (operation == "+" || operation == "-")
            {
                priority = 1;
            }
            else if (operation == "*" || operation == "/")
            {
                priority = 2;
            } 
            else if (operation == "^")
            {
                priority = 3;
            }
            return priority;
        }
        
        static Queue<string> Shunting_yard(Queue<string> tokens)
        {
            Stack<string> operators_stack = new Stack<string>();
            Queue<string> inverse_polish_sorted = new Queue<string>();

            //for (int i = 0; i < tokens.Count; i++)
            foreach (var token in tokens)
            {
                if (IsItReallyNumeric(token))
                {
                    inverse_polish_sorted.Enqueue(token);
                }
                else if(token == "(")
                {
                    operators_stack.Push(token);
                }
                else if(token == ")")
                {
                    while (operators_stack.Peek() != "(")
                    {
                        inverse_polish_sorted.Enqueue(operators_stack.Pop());
                    }
                    operators_stack.Pop();
                }
                else
                {
                    while (operators_stack.Count > 0 && CheckPriority(operators_stack.Peek()) >= CheckPriority(token) )
                    {
                        inverse_polish_sorted.Enqueue(operators_stack.Pop());
                    }
                    operators_stack.Push(token);
                }
            }
            if (operators_stack.Count > 0)
            {
                for (int i = 0; i < operators_stack.Count - 1; i++)
                {
                    inverse_polish_sorted.Enqueue(operators_stack.Pop());
                }
                inverse_polish_sorted.Enqueue(operators_stack.Pop());
            }
            
            return inverse_polish_sorted;
        }

      
        
        static void Final_count(Queue<string> tokens)
        {
            double result = 0.0;
            Stack<string> numstack = new Stack<string>();

            double tostack;
            
           foreach (string token in tokens)
            //for (int i = 0; i < tokens.Count; i++)
            {
              //  string token = tokens.Dequeue();
                
                
                if (IsItReallyNumeric(token))
                {
                    numstack.Push(token);
                }
                else
                {
                    if (token == "+")
                    {
                        double num_b = Convert.ToDouble(numstack.Pop());
                        double num_a = Convert.ToDouble(numstack.Pop());
                        tostack = num_a + num_b;
                        numstack.Push(Convert.ToString(tostack));
                    }
                    if (token == "-")
                    {
                        double num_b = Convert.ToDouble(numstack.Pop());
                        double num_a = Convert.ToDouble(numstack.Pop());
                        tostack = num_a - num_b;
                        numstack.Push(Convert.ToString(tostack));
                    }
                    if (token == "/")
                    {
                        double num_b = Convert.ToDouble(numstack.Pop());
                        double num_a = Convert.ToDouble(numstack.Pop());
                        tostack = num_a / num_b;
                        numstack.Push(Convert.ToString(tostack));
                    }
                    if (token == "*")
                    {
                        double num_b = Convert.ToDouble(numstack.Pop());
                        double num_a = Convert.ToDouble(numstack.Pop());
                        tostack = num_a * num_b;
                        numstack.Push(Convert.ToString(tostack));
                    }
                    if (token == "^")
                    {
                        double num_b = Convert.ToDouble(numstack.Pop());
                        double num_a = Convert.ToDouble(numstack.Pop());
                        
                        for (int i = 0; i < num_b; i++)
                        {
                           // tostack *= num_a;
                        }
                        
                        numstack.Push(Convert.ToString(0));
                    }
                    
                }
                
                
                
            }

            result = Convert.ToDouble(numstack.Peek());
            Console.WriteLine(numstack.Peek());
           // return result;
        }

        static void Main(string[] args)
        {
            
           
           // string input_string = "2*2+(5-4)";
            //string input_string = "123*4-(56/7)";
           // string input_string = "123+4*(56/7)";
            //
            //string input_string = "12+(34-56)*78";
            string input_string = "1+2^2";

            Queue<string> received_tokens = Tokenize(input_string);

            Queue<string> invert = Shunting_yard(received_tokens);
            
          //  Console.WriteLine(Final_count(invert));
          Final_count(invert);
          
          
           foreach (var piece in invert)
           { 
              // Console.WriteLine(piece);
               Console.Write("");
           }
  
          // Console.Write(IsItReallyNumeric("123456789"));
           
        }
        
        
        
    }
}
